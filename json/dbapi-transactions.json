{
  "openapi": "3.0.1",
  "info": {
    "title": "dbapi-transactions",
    "description": "Provides transactions information from your customer's savings and current accounts for the last 13 months.",
    "termsOfService": "https://developer.db.com/termsandconditions",
    "contact": {
      "url": "https://developer.db.com/contact",
      "email": "bank.api@db.com"
    },
    "version": "v2"
  },
  "servers": [
    {
      "url": "https://simulator-api.db.com:443/gw/dbapi/banking/transactions/v2"
    }
  ],
  "tags": [
    {
      "name": "Transactions",
      "description": "Provides all transactions information from your customers' savings and current accounts for the last 13 months."
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Reads transactions for cash accounts.",
        "description": "Reads transactions for cash accounts (current and deposit) for the given customer. The API provides in default up to 13 months of transaction history. If given IBAN is not valid or does not represent an account of the current customer, an empty result is returned. It is not apparent who issued a transaction, only whether the user gained or lost money by it (based on whether the amount is positive or negative respectively). The maximum number of transactions returned is 200.",
        "operationId": "getCashAccountTransactions",
        "parameters": [
          {
            "name": "iban",
            "in": "query",
            "description": "IBAN representing an account of the current user.",
            "required": true,
            "schema": {
              "maxLength": 34,
              "minLength": 5,
              "pattern": "[A-Z]{2}[0-9]{2}[A-Z0-9]{1,30}",
              "type": "string"
            }
          },
          {
            "name": "currencyCode",
            "in": "query",
            "description": "ISO 4217 Alpha 3 currency code.",
            "schema": {
              "pattern": "[A-Z]{3}",
              "type": "string"
            }
          },
          {
            "name": "bookingDateFrom",
            "in": "query",
            "description": "booking date of original transaction. Date in ISO 8601 format, YYYY-MM-DD. If not provided, 1980-01-01 will be chosen if called with a PSD2-compliant strong customer authentication (SCA), or the date prior to today with a maximum PSD2-compliant daycount if not called with a PSD2-compliant SCA. Please note that choosing a date too far into the past might lead to an error response if the result set would become too big. In this case narrowing the interval can help.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "bookingDateTo",
            "in": "query",
            "description": "booking date until which the transactions to be searched for. Date in ISO 8601 format YYYY-MM-DD. If not provided, the current day will be chosen. bookingDateTo must be greater than or equal to bookingDateFrom.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "sort order of transactions - supported sort orders are 'bookingDate[ASC]' or 'bookingDate[DESC]'.",
            "schema": {
              "type": "string",
              "enum": [
                "bookingDate[ASC]",
                "bookingDate[DESC]"
              ],
              "default": "bookingDate[ASC]"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit defines count of resources per request/page.",
            "schema": {
              "maximum": 200,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "the page to be returned.",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Correlation-Id",
            "in": "header",
            "description": "Free form key controlled by the caller e.g. uuid",
            "required": false,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalItems": {
                      "minimum": 0,
                      "type": "integer",
                      "description": "Cumulated number of items across all pages for your request parameters.",
                      "format": "int32"
                    },
                    "limit": {
                      "minimum": 0,
                      "type": "integer",
                      "description": "The number of items of a page.",
                      "format": "int32"
                    },
                    "offset": {
                      "minimum": 0,
                      "type": "integer",
                      "description": "The page to be returned.",
                      "format": "int32"
                    },
                    "transactions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CashAccountTransaction"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unsuccessful operation, returns http status 400. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 2,
                    "message": "Invalid value for %s."
                  },
                  {
                    "code": 18,
                    "message": "Backend problem. Please narrow time interval."
                  },
                  {
                    "code": 114,
                    "message": "Unable to identify transaction by Id."
                  },
                  {
                    "code": 122,
                    "message": "Invalid OTP."
                  },
                  {
                    "code": 127,
                    "message": "Booking date from must precede booking date to."
                  },
                  {
                    "code": 131,
                    "message": "Invalid value for 'sortBy'. Valid values are 'bookingDate[ASC]' and 'bookingDate[DESC]'."
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unsuccessful operation, returns http status 401. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 401,
                    "message": "The requested function requires a SCA Level Authentication."
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "api_implicit": [
              "read_transactions"
            ]
          },
          {
            "api_auth_code": [
              "read_transactions"
            ]
          }
        ]
      }
    },
    "/{transactionId}": {
      "get": {
        "tags": [
          "Transaction"
        ],
        "summary": "Reads a single transaction by id.",
        "description": "Reads a single transaction by its id.",
        "operationId": "",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "description": "The id of the requested transaction. This id is NOT immutable and is to be used primarily in conjunction with the transaction notification API when requesting a specific transaction.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Correlation-Id",
            "in": "header",
            "description": "Free form key controlled by the caller e.g. uuid",
            "required": false,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CashAccountTransaction"
                }
              }
            }
          },
          "400": {
            "description": "Unsuccessful operation, returns http status 400. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 2,
                    "message": "Invalid value for %s."
                  },
                  {
                    "code": 18,
                    "message": "Backend problem. Please narrow time interval."
                  },
                  {
                    "code": 114,
                    "message": "Unable to identify transaction by Id."
                  },
                  {
                    "code": 122,
                    "message": "Invalid OTP."
                  },
                  {
                    "code": 127,
                    "message": "Booking date from must precede booking date to."
                  },
                  {
                    "code": 131,
                    "message": "Invalid value for 'sortBy'. Valid values are 'bookingDate[ASC]' and 'bookingDate[DESC]'."
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unsuccessful operation, returns http status 401. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 401,
                    "message": "The requested function requires a SCA Level Authentication."
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "api_implicit": [
              "read_transactions"
            ]
          },
          {
            "api_auth_code": [
              "read_transactions"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "CashAccountTransaction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CashAccountTransaction_2"
          },
          {
            "required": [
              "id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The id of the requested transaction. This id is NOT immutable and is to be used primarily in conjunction with the transaction notification API when requesting a specific transaction."
              }
            }
          }
        ]
      },
      "CashAccountTransaction_2": {
        "required": [
          "amount",
          "bookingDate",
          "currencyCode",
          "originIban"
        ],
        "type": "object",
        "properties": {
          "originIban": {
            "$ref": "#/components/schemas/IBAN"
          },
          "amount": {
            "type": "number",
            "description": "Amount of the transaction. If the amount is positive, the customer received money, if the amount is negative the customer lost money."
          },
          "counterPartyName": {
            "type": "string",
            "description": "Name of the counter party."
          },
          "counterPartyIban": {
            "$ref": "#/components/schemas/IBAN"
          },
          "counterPartyBic": {
            "$ref": "#/components/schemas/BIC"
          },
          "paymentReference": {
            "type": "string",
            "description": "Payment reference."
          },
          "bookingDate": {
            "type": "string",
            "description": "Booking date. In the format YYYY-MM-DD."
          },
          "currencyCode": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "transactionCode": {
            "type": "string",
            "description": "Specifies the business transaction code (GVC)."
          },
          "externalBankTransactionDomainCode": {
            "type": "string",
            "description": "Specifies the bank transaction code domain, as published in an external bank transaction code domain code list according to ISO 20022."
          },
          "externalBankTransactionFamilyCode": {
            "type": "string",
            "description": "Specifies the external family code of the bank transaction code in the format of character string with a maximum length of 4 characters according to ISO 20022."
          },
          "externalBankTransactionSubFamilyCode": {
            "type": "string",
            "description": "Specifies the bank transaction code sub-family, as published in an external bank transaction code sub-family code list according to ISO 20022."
          },
          "mandateReference": {
            "type": "string",
            "description": "MandateReference of the direct debit transaction, max length 35 characters."
          },
          "creditorId": {
            "type": "string",
            "description": "Creditor ID, max length 35 characters."
          },
          "e2eReference": {
            "type": "string",
            "description": "Unique identification given by the orderer to identify the order."
          },
          "paymentIdentification": {
            "type": "string",
            "description": "Unique and unambiguous identification of a transaction, as assigned by any of the customer parties on the initiating side."
          },
          "valueDate": {
            "type": "string",
            "description": "Value date of Transaction in ISO 8601 format (YYYY-MM-DD). In very specific cases, technical date is possible for e.g., (2020-02-30)."
          }
        },
        "description": "A cash account transaction."
      },
      "IBAN": {
        "pattern": "[A-Z]{2}[0-9]{2}[A-Z0-9]{1,30}",
        "type": "string",
        "description": "The IBAN of this account."
      },
      "BIC": {
        "pattern": "[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}",
        "type": "string",
        "description": "BIC (Bank Identifier Code) code."
      },
      "CurrencyCode": {
        "pattern": "[A-Z]{3}",
        "type": "string",
        "description": "ISO 4217 Alpha 3 currency code.",
        "example": "EUR"
      },
      "ErrorResponse": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The error code"
          },
          "message": {
            "type": "string",
            "description": "Description of the belonging error code."
          },
          "messageId": {
            "type": "string",
            "description": "dbAPI internal message-id (unique identifier) that allow reference to each of your API calls."
          }
        },
        "description": "Default error response message"
      }
    },
    "securitySchemes": {
      "api_auth_code": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://simulator-api.db.com:443/gw/oidc/authorize",
            "tokenUrl": "https://simulator-api.db.com:443/gw/oidc/token",
            "scopes": {
              "read_transactions": "Grants read access to transactions for cash accounts (current and deposit) for the given customer. The API provides in default up to 13 months of transaction history.",
              "openid": "Request access to OpenId Connect functionality",
              "offline_access": "Request an OAuth2 Refresh Token"
            }
          }
        }
      },
      "api_implicit": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://simulator-api.db.com:443/gw/oidc/authorize",
            "scopes": {
              "read_transactions": "Grants read access to transactions for cash accounts (current and deposit) for the given customer. The API provides in default up to 13 months of transaction history.",
              "openid": "Request access to OpenId Connect functionality"
            }
          }
        }
      }
    }
  },
  "x-original-swagger-version": "2.0"
}