{
  "openapi": "3.0.1",
  "info": {
    "title": "dbapi-sepaCreditTransfer",
    "description": "Easily initiate SEPA Credit transfer then if required cancel or get the status and get the details afterwards.",
    "termsOfService": "https://developer.db.com/termsandconditions",
    "contact": {
      "url": "https://developer.db.com/contact",
      "email": "bank.api@db.com"
    },
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://simulator-api.db.com:443/gw/dbapi/paymentInitiation/payments/v1/sepaCreditTransfer"
    }
  ],
  "tags": [
    {
      "name": "Create Sepa Credit Transfers",
      "description": "Create a Sepa Credit Transfers"
    },
    {
      "name": "Get status for Sepa Credit Transfers",
      "description": "Get the status of Sepa Credit Transfers"
    },
    {
      "name": "Get details for Sepa Credit Transfers",
      "description": "Get the details of Sepa Credit Transfers"
    },
    {
      "name": "Cancel Sepa Credit Transfers",
      "description": "Cancel an existing Sepa Credit Transfers"
    },
    {
      "name": "Second Factor Retry",
      "description": "Second Factor Retry for an existing Sepa Credit Transfers"
    }
  ],
  "paths": {
    "/": {
      "post": {
        "tags": [
          "Create Sepa Credit Transfers"
        ],
        "summary": "Initiates a SEPA Credit Transfers",
        "description": "This API is for creating a Sepa Credit Transfers",
        "parameters": [
          {
            "name": "idempotency-id",
            "in": "header",
            "description": "Unique id of the service call. Must be present during retries to avoid multiple processing of the same request",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "otp",
            "in": "header",
            "description": "One time password required for SCT creation; you can use photo tan or push tan. In case of push tan, pass otp as 'PUSHTAN'. In case of photo tan, please generate otp by using transaction authorisation APIs. There, you must use requestType as 'SEPA_TRANSFER_GRANT'.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Correlation-Id",
            "in": "header",
            "description": "Free form key controlled by the caller e.g. uuid",
            "required": false,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SepaCreditTransferRequest"
              },
              "example": {
                "creditor": {
                  "creditorName": "John Doe",
                  "creditorPostalAddress": {
                    "country": "DE",
                    "addressLine": {
                      "streetAndHouseNumber": "Main Street 123",
                      "zipCodeAndCity": "12345 Berlin"
                    }
                  }
                },
                "creditorAccount": {
                  "iban": "DE89370400440532013000",
                  "currency": "EUR"
                },
                "creditorAgent": {
                  "financialInstitutionId": {
                    "bic": "DEUTDEFF"
                  }
                },
                "debtor": {
                  "debtorName": "Jane Smith",
                  "debtorPostalAddress": {
                    "country": "DE",
                    "addressLine": {
                      "streetAndHouseNumber": "Second Street 456",
                      "zipCodeAndCity": "67890 Munich"
                    }
                  }
                },
                "debtorAccount": {
                  "iban": "DE89370400440532013001",
                  "currency": "EUR"
                },
                "instructedAmount": {
                  "amount": 100.50,
                  "currency": "EUR"
                },
                "purposeCode": "SALA",
                "requestedExecutionDate": "2023-12-01"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SepaCreditTransferResponse"
                },
                "example": {
                  "transactionStatus": "ACCP",
                  "paymentId": "232ed5b7-fc70-4c67-98bb-bf95b3300001",
                  "authId": "232ed5b7-fc70-4c67-98bb-bf95b3300002"
                }
              }
            }
          },
          "400": {
            "description": "Unsuccessful operation, returns http status 400. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 2,
                    "message": "Invalid value for %s."
                  },
                  {
                    "code": 16,
                    "message": "OTP invalid challenge response: %s."
                  },
                  {
                    "code": 17,
                    "message": "Invalid OTP."
                  },
                  {
                    "code": 114,
                    "message": "Unable to identify transaction by Id."
                  },
                  {
                    "code": 127,
                    "message": "Booking date from must precede booking date to."
                  },
                  {
                    "code": 131,
                    "message": "Invalid value for 'sortBy'. Valid values are 'bookingDate[ASC]' and 'bookingDate[DESC]'."
                  },
                  {
                    "code": 132,
                    "message": "not supported"
                  },
                  {
                    "code": 138,
                    "message": "it seems that you started a non pushTAN challenge. Please use the PATCH endpoint to continue"
                  },
                  {
                    "code": 139,
                    "message": "it seems that you started a pushTAN challenge. Please use the GET endpoint to continue"
                  },
                  {
                    "code": 6500,
                    "message": "Parameters in the url or content type are incorrect, please check and retry."
                  },
                  {
                    "code": 6501,
                    "message": "Contracting bank details are Invalid or Missing."
                  },
                  {
                    "code": 6502,
                    "message": "The accepted instructed amount currency is EUR. Please correct your entry and try again."
                  },
                  {
                    "code": 6503,
                    "message": "Parameters submitted are missing or invalid."
                  },
                  {
                    "code": 6505,
                    "message": "Invalid execution date."
                  },
                  {
                    "code": 6507,
                    "message": "Cancellation is not allowed for this transaction."
                  },
                  {
                    "code": 6509,
                    "message": "The parameter in the request does not match with the latest Auth id."
                  },
                  {
                    "code": 6510,
                    "message": "Current status does not allow second factor update with the action provided."
                  },
                  {
                    "code": 6511,
                    "message": "Invalid execution date."
                  },
                  {
                    "code": 6515,
                    "message": "The source iban or account type is invalid."
                  },
                  {
                    "code": 6516,
                    "message": "Cancellation is not allowed for this transaction."
                  },
                  {
                    "code": 6517,
                    "message": "The accepted creditor account currency is EUR. Please correct your entry and try again."
                  },
                  {
                    "code": 6518,
                    "message": "The requested collection date should not be a public holiday or in the weekends. Please try again."
                  },
                  {
                    "code": 6519,
                    "message": "The requested execution date should not be greater than 90 days in the future. Please try again."
                  },
                  {
                    "code": 6520,
                    "message": "Invalid value: requestedExecutionDate must match yyyy-MM-dd format."
                  },
                  {
                    "code": 6521,
                    "message": "The accepted debtor account currency is EUR. Please correct your entry and try again."
                  },
                  {
                    "code": 6523,
                    "message": "There is no legal entity present for the source iban. Please correct your entry and try again."
                  },
                  {
                    "code": 6524,
                    "message": "You have reached the maximum allowable limit for the day. Please wait until tomorrow to initiate additional transfers or reduce your transfer amount and try again."
                  },
                  {
                    "code": 6525,
                    "message": "For the moment, we don't support photo-tan for bulk payments."
                  },
                  {
                    "code": 6526,
                    "message": "Invalid value: createDateTime must match yyyy-MM-dd'T'HH:mm:ss format."
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unsuccessful operation, returns http status 401. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 401,
                    "message": "The requested function requires a SCA Level Authentication."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Unsuccessful operation, returns http status 404. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 6504,
                    "message": "The parameters in the request do not match the initial request."
                  },
                  {
                    "code": 6508,
                    "message": "Sepa payment not found."
                  }
                ]
              }
            }
          },
          "409": {
            "description": "Unsuccessful operation, returns http status 409. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 6506,
                    "message": "The IdempotencyId already being used."
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "api_auth_code": [
              "sepa_credit_transfers"
            ]
          },
          {
            "api_implicit": [
              "sepa_credit_transfers"
            ]
          },
          {
            "api_db_smart_access": [
              "sepa_credit_transfers"
            ]
          }
        ]
      }
    },
    "/{paymentId}/status": {
      "get": {
        "tags": [
          "Get status for Sepa Credit Transfers"
        ],
        "summary": "Retrieve the status of the Sepa Credit Transfers",
        "description": "Retrieve the status of a previously initiated Sepa Credit Transfer.",
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "description": "Payment Id of Sepa Credit Transfers",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Correlation-Id",
            "in": "header",
            "description": "Free form key controlled by the caller e.g. uuid",
            "required": false,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SepaCreditTransferResponse"
                },
                "example": {
                  "transactionStatus": "PDNG",
                  "paymentId": "232ed5b7-fc70-4c67-98bb-bf95b3300001",
                  "authId": "232ed5b7-fc70-4c67-98bb-bf95b3300002"
                }
              }
            }
          },
          "400": {
            "description": "Unsuccessful operation, returns http status 400. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 2,
                    "message": "Invalid value for %s."
                  },
                  {
                    "code": 16,
                    "message": "OTP invalid challenge response: %s."
                  },
                  {
                    "code": 17,
                    "message": "Invalid OTP."
                  },
                  {
                    "code": 114,
                    "message": "Unable to identify transaction by Id."
                  },
                  {
                    "code": 127,
                    "message": "Booking date from must precede booking date to."
                  },
                  {
                    "code": 131,
                    "message": "Invalid value for 'sortBy'. Valid values are 'bookingDate[ASC]' and 'bookingDate[DESC]'."
                  },
                  {
                    "code": 132,
                    "message": "not supported"
                  },
                  {
                    "code": 138,
                    "message": "it seems that you started a non pushTAN challenge. Please use the PATCH endpoint to continue"
                  },
                  {
                    "code": 139,
                    "message": "it seems that you started a pushTAN challenge. Please use the GET endpoint to continue"
                  },
                  {
                    "code": 6500,
                    "message": "Parameters in the url or content type are incorrect, please check and retry."
                  },
                  {
                    "code": 6501,
                    "message": "Contracting bank details are Invalid or Missing."
                  },
                  {
                    "code": 6502,
                    "message": "The accepted instructed amount currency is EUR. Please correct your entry and try again."
                  },
                  {
                    "code": 6503,
                    "message": "Parameters submitted are missing or invalid."
                  },
                  {
                    "code": 6505,
                    "message": "Invalid execution date."
                  },
                  {
                    "code": 6507,
                    "message": "Cancellation is not allowed for this transaction."
                  },
                  {
                    "code": 6509,
                    "message": "The parameter in the request does not match with the latest Auth id."
                  },
                  {
                    "code": 6510,
                    "message": "Current status does not allow second factor update with the action provided."
                  },
                  {
                    "code": 6511,
                    "message": "Invalid execution date."
                  },
                  {
                    "code": 6515,
                    "message": "The source iban or account type is invalid."
                  },
                  {
                    "code": 6516,
                    "message": "Cancellation is not allowed for this transaction."
                  },
                  {
                    "code": 6517,
                    "message": "The accepted creditor account currency is EUR. Please correct your entry and try again."
                  },
                  {
                    "code": 6518,
                    "message": "The requested collection date should not be a public holiday or in the weekends. Please try again."
                  },
                  {
                    "code": 6519,
                    "message": "The requested execution date should not be greater than 90 days in the future. Please try again."
                  },
                  {
                    "code": 6520,
                    "message": "Invalid value: requestedExecutionDate must match yyyy-MM-dd format."
                  },
                  {
                    "code": 6521,
                    "message": "The accepted debtor account currency is EUR. Please correct your entry and try again."
                  },
                  {
                    "code": 6523,
                    "message": "There is no legal entity present for the source iban. Please correct your entry and try again."
                  },
                  {
                    "code": 6524,
                    "message": "You have reached the maximum allowable limit for the day. Please wait until tomorrow to initiate additional transfers or reduce your transfer amount and try again."
                  },
                  {
                    "code": 6525,
                    "message": "For the moment, we don't support photo-tan for bulk payments."
                  },
                  {
                    "code": 6526,
                    "message": "Invalid value: createDateTime must match yyyy-MM-dd'T'HH:mm:ss format."
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unsuccessful operation, returns http status 401. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 401,
                    "message": "The requested function requires a SCA Level Authentication."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Unsuccessful operation, returns http status 404. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 6504,
                    "message": "The parameters in the request do not match the initial request."
                  },
                  {
                    "code": 6508,
                    "message": "Sepa payment not found."
                  }
                ]
              }
            }
          },
          "409": {
            "description": "Unsuccessful operation, returns http status 409. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 6506,
                    "message": "The IdempotencyId already being used."
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "api_auth_code": [
              "sepa_credit_transfers"
            ]
          },
          {
            "api_implicit": [
              "sepa_credit_transfers"
            ]
          },
          {
            "api_db_smart_access": [
              "sepa_credit_transfers"
            ]
          }
        ]
      }
    },
    "/{paymentId}": {
      "get": {
        "tags": [
          "Get details for Sepa Credit Transfers"
        ],
        "summary": "Retrieve the Sepa Credit Transfer details",
        "description": "Retrieve the details of a previously initiated Sepa Credit Transfer.",
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "description": "Payment Id of Sepa Credit Transfers",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Correlation-Id",
            "in": "header",
            "description": "Free form key controlled by the caller e.g. uuid",
            "required": false,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SepaCreditTransferDetailsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unsuccessful operation, returns http status 400. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 2,
                    "message": "Invalid value for %s."
                  },
                  {
                    "code": 16,
                    "message": "OTP invalid challenge response: %s."
                  },
                  {
                    "code": 17,
                    "message": "Invalid OTP."
                  },
                  {
                    "code": 114,
                    "message": "Unable to identify transaction by Id."
                  },
                  {
                    "code": 127,
                    "message": "Booking date from must precede booking date to."
                  },
                  {
                    "code": 131,
                    "message": "Invalid value for 'sortBy'. Valid values are 'bookingDate[ASC]' and 'bookingDate[DESC]'."
                  },
                  {
                    "code": 132,
                    "message": "not supported"
                  },
                  {
                    "code": 138,
                    "message": "it seems that you started a non pushTAN challenge. Please use the PATCH endpoint to continue"
                  },
                  {
                    "code": 139,
                    "message": "it seems that you started a pushTAN challenge. Please use the GET endpoint to continue"
                  },
                  {
                    "code": 6500,
                    "message": "Parameters in the url or content type are incorrect, please check and retry."
                  },
                  {
                    "code": 6501,
                    "message": "Contracting bank details are Invalid or Missing."
                  },
                  {
                    "code": 6502,
                    "message": "The accepted instructed amount currency is EUR. Please correct your entry and try again."
                  },
                  {
                    "code": 6503,
                    "message": "Parameters submitted are missing or invalid."
                  },
                  {
                    "code": 6505,
                    "message": "Invalid execution date."
                  },
                  {
                    "code": 6507,
                    "message": "Cancellation is not allowed for this transaction."
                  },
                  {
                    "code": 6509,
                    "message": "The parameter in the request does not match with the latest Auth id."
                  },
                  {
                    "code": 6510,
                    "message": "Current status does not allow second factor update with the action provided."
                  },
                  {
                    "code": 6511,
                    "message": "Invalid execution date."
                  },
                  {
                    "code": 6515,
                    "message": "The source iban or account type is invalid."
                  },
                  {
                    "code": 6516,
                    "message": "Cancellation is not allowed for this transaction."
                  },
                  {
                    "code": 6517,
                    "message": "The accepted creditor account currency is EUR. Please correct your entry and try again."
                  },
                  {
                    "code": 6518,
                    "message": "The requested collection date should not be a public holiday or in the weekends. Please try again."
                  },
                  {
                    "code": 6519,
                    "message": "The requested execution date should not be greater than 90 days in the future. Please try again."
                  },
                  {
                    "code": 6520,
                    "message": "Invalid value: requestedExecutionDate must match yyyy-MM-dd format."
                  },
                  {
                    "code": 6521,
                    "message": "The accepted debtor account currency is EUR. Please correct your entry and try again."
                  },
                  {
                    "code": 6523,
                    "message": "There is no legal entity present for the source iban. Please correct your entry and try again."
                  },
                  {
                    "code": 6524,
                    "message": "You have reached the maximum allowable limit for the day. Please wait until tomorrow to initiate additional transfers or reduce your transfer amount and try again."
                  },
                  {
                    "code": 6525,
                    "message": "For the moment, we don't support photo-tan for bulk payments."
                  },
                  {
                    "code": 6526,
                    "message": "Invalid value: createDateTime must match yyyy-MM-dd'T'HH:mm:ss format."
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unsuccessful operation, returns http status 401. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 401,
                    "message": "The requested function requires a SCA Level Authentication."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Unsuccessful operation, returns http status 404. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 6504,
                    "message": "The parameters in the request do not match the initial request."
                  },
                  {
                    "code": 6508,
                    "message": "Sepa payment not found."
                  }
                ]
              }
            }
          },
          "409": {
            "description": "Unsuccessful operation, returns http status 409. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 6506,
                    "message": "The IdempotencyId already being used."
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "api_auth_code": [
              "sepa_credit_transfers"
            ]
          },
          {
            "api_implicit": [
              "sepa_credit_transfers"
            ]
          },
          {
            "api_db_smart_access": [
              "sepa_credit_transfers"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Cancel Sepa Credit Transfers"
        ],
        "summary": "Cancel the Sepa Credit Transfers",
        "description": "Cancel a previously initiated Sepa Credit Transfer.",
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "description": "Payment Id of Sepa Credit Transfers",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "idempotency-id",
            "in": "header",
            "description": "Unique id of the service call. Must be present during retries to avoid multiple processing of the same request",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "otp",
            "in": "header",
            "description": "One time password required for SCT cancellation; you can use photo tan or push tan. In case of push tan, pass otp as 'PUSHTAN'. In case of photo tan, please generate otp by using transaction authorisation APIs. There, you must use requestType as 'SEPA_TRANSFER_CANCELLATION'.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Correlation-Id",
            "in": "header",
            "description": "Free form key controlled by the caller e.g. uuid",
            "required": false,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SepaCreditTransferResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unsuccessful operation, returns http status 400. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 2,
                    "message": "Invalid value for %s."
                  },
                  {
                    "code": 16,
                    "message": "OTP invalid challenge response: %s."
                  },
                  {
                    "code": 17,
                    "message": "Invalid OTP."
                  },
                  {
                    "code": 114,
                    "message": "Unable to identify transaction by Id."
                  },
                  {
                    "code": 127,
                    "message": "Booking date from must precede booking date to."
                  },
                  {
                    "code": 131,
                    "message": "Invalid value for 'sortBy'. Valid values are 'bookingDate[ASC]' and 'bookingDate[DESC]'."
                  },
                  {
                    "code": 132,
                    "message": "not supported"
                  },
                  {
                    "code": 138,
                    "message": "it seems that you started a non pushTAN challenge. Please use the PATCH endpoint to continue"
                  },
                  {
                    "code": 139,
                    "message": "it seems that you started a pushTAN challenge. Please use the GET endpoint to continue"
                  },
                  {
                    "code": 6500,
                    "message": "Parameters in the url or content type are incorrect, please check and retry."
                  },
                  {
                    "code": 6501,
                    "message": "Contracting bank details are Invalid or Missing."
                  },
                  {
                    "code": 6502,
                    "message": "The accepted instructed amount currency is EUR. Please correct your entry and try again."
                  },
                  {
                    "code": 6503,
                    "message": "Parameters submitted are missing or invalid."
                  },
                  {
                    "code": 6505,
                    "message": "Invalid execution date."
                  },
                  {
                    "code": 6507,
                    "message": "Cancellation is not allowed for this transaction."
                  },
                  {
                    "code": 6509,
                    "message": "The parameter in the request does not match with the latest Auth id."
                  },
                  {
                    "code": 6510,
                    "message": "Current status does not allow second factor update with the action provided."
                  },
                  {
                    "code": 6511,
                    "message": "Invalid execution date."
                  },
                  {
                    "code": 6515,
                    "message": "The source iban or account type is invalid."
                  },
                  {
                    "code": 6516,
                    "message": "Cancellation is not allowed for this transaction."
                  },
                  {
                    "code": 6517,
                    "message": "The accepted creditor account currency is EUR. Please correct your entry and try again."
                  },
                  {
                    "code": 6518,
                    "message": "The requested collection date should not be a public holiday or in the weekends. Please try again."
                  },
                  {
                    "code": 6519,
                    "message": "The requested execution date should not be greater than 90 days in the future. Please try again."
                  },
                  {
                    "code": 6520,
                    "message": "Invalid value: requestedExecutionDate must match yyyy-MM-dd format."
                  },
                  {
                    "code": 6521,
                    "message": "The accepted debtor account currency is EUR. Please correct your entry and try again."
                  },
                  {
                    "code": 6523,
                    "message": "There is no legal entity present for the source iban. Please correct your entry and try again."
                  },
                  {
                    "code": 6524,
                    "message": "You have reached the maximum allowable limit for the day. Please wait until tomorrow to initiate additional transfers or reduce your transfer amount and try again."
                  },
                  {
                    "code": 6525,
                    "message": "For the moment, we don't support photo-tan for bulk payments."
                  },
                  {
                    "code": 6526,
                    "message": "Invalid value: createDateTime must match yyyy-MM-dd'T'HH:mm:ss format."
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unsuccessful operation, returns http status 401. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 401,
                    "message": "The requested function requires a SCA Level Authentication."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Unsuccessful operation, returns http status 404. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 6504,
                    "message": "The parameters in the request do not match the initial request."
                  },
                  {
                    "code": 6508,
                    "message": "Sepa payment not found."
                  }
                ]
              }
            }
          },
          "409": {
            "description": "Unsuccessful operation, returns http status 409. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 6506,
                    "message": "The IdempotencyId already being used."
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "api_auth_code": [
              "sepa_credit_transfers"
            ]
          },
          {
            "api_implicit": [
              "sepa_credit_transfers"
            ]
          },
          {
            "api_db_smart_access": [
              "sepa_credit_transfers"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Second Factor Retry"
        ],
        "summary": "Second factor retry for Sepa Credit Transfers",
        "description": "User can retry the second factor if it's failed. The new once's will be initiated after deleting the existing once's.",
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "description": "Payment Id of Sepa Credit Transfers",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "idempotency-id",
            "in": "header",
            "description": "Unique id of the service call. Must be present during retries to avoid multiple processing of the same request.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "otp",
            "in": "header",
            "description": "One time password required for second factor update. In case of push tan, use 'PUSHTAN'. In case of photo tan, please generate otp by using transaction authorisation APIs. There, you must use requestType corresponds to the action. For create action it must be 'SEPA_TRANSFER_GRANT' and for cancel 'SEPA_TRANSFER_CANCELLATION'.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Correlation-Id",
            "in": "header",
            "description": "Free form key controlled by the caller e.g. uuid",
            "required": false,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SepaCreditTransferUpdateScaRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SepaCreditTransferResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unsuccessful operation, returns http status 400. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 2,
                    "message": "Invalid value for %s."
                  },
                  {
                    "code": 16,
                    "message": "OTP invalid challenge response: %s."
                  },
                  {
                    "code": 17,
                    "message": "Invalid OTP."
                  },
                  {
                    "code": 114,
                    "message": "Unable to identify transaction by Id."
                  },
                  {
                    "code": 127,
                    "message": "Booking date from must precede booking date to."
                  },
                  {
                    "code": 131,
                    "message": "Invalid value for 'sortBy'. Valid values are 'bookingDate[ASC]' and 'bookingDate[DESC]'."
                  },
                  {
                    "code": 132,
                    "message": "not supported"
                  },
                  {
                    "code": 138,
                    "message": "it seems that you started a non pushTAN challenge. Please use the PATCH endpoint to continue"
                  },
                  {
                    "code": 139,
                    "message": "it seems that you started a pushTAN challenge. Please use the GET endpoint to continue"
                  },
                  {
                    "code": 6500,
                    "message": "Parameters in the url or content type are incorrect, please check and retry."
                  },
                  {
                    "code": 6501,
                    "message": "Contracting bank details are Invalid or Missing."
                  },
                  {
                    "code": 6502,
                    "message": "The accepted instructed amount currency is EUR. Please correct your entry and try again."
                  },
                  {
                    "code": 6503,
                    "message": "Parameters submitted are missing or invalid."
                  },
                  {
                    "code": 6505,
                    "message": "Invalid execution date."
                  },
                  {
                    "code": 6507,
                    "message": "Cancellation is not allowed for this transaction."
                  },
                  {
                    "code": 6509,
                    "message": "The parameter in the request does not match with the latest Auth id."
                  },
                  {
                    "code": 6510,
                    "message": "Current status does not allow second factor update with the action provided."
                  },
                  {
                    "code": 6511,
                    "message": "Invalid execution date."
                  },
                  {
                    "code": 6515,
                    "message": "The source iban or account type is invalid."
                  },
                  {
                    "code": 6516,
                    "message": "Cancellation is not allowed for this transaction."
                  },
                  {
                    "code": 6517,
                    "message": "The accepted creditor account currency is EUR. Please correct your entry and try again."
                  },
                  {
                    "code": 6518,
                    "message": "The requested collection date should not be a public holiday or in the weekends. Please try again."
                  },
                  {
                    "code": 6519,
                    "message": "The requested execution date should not be greater than 90 days in the future. Please try again."
                  },
                  {
                    "code": 6520,
                    "message": "Invalid value: requestedExecutionDate must match yyyy-MM-dd format."
                  },
                  {
                    "code": 6521,
                    "message": "The accepted debtor account currency is EUR. Please correct your entry and try again."
                  },
                  {
                    "code": 6523,
                    "message": "There is no legal entity present for the source iban. Please correct your entry and try again."
                  },
                  {
                    "code": 6524,
                    "message": "You have reached the maximum allowable limit for the day. Please wait until tomorrow to initiate additional transfers or reduce your transfer amount and try again."
                  },
                  {
                    "code": 6525,
                    "message": "For the moment, we don't support photo-tan for bulk payments."
                  },
                  {
                    "code": 6526,
                    "message": "Invalid value: createDateTime must match yyyy-MM-dd'T'HH:mm:ss format."
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unsuccessful operation, returns http status 401. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 401,
                    "message": "The requested function requires a SCA Level Authentication."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Unsuccessful operation, returns http status 404. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 6504,
                    "message": "The parameters in the request do not match the initial request."
                  },
                  {
                    "code": 6508,
                    "message": "Sepa payment not found."
                  }
                ]
              }
            }
          },
          "409": {
            "description": "Unsuccessful operation, returns http status 409. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 6506,
                    "message": "The IdempotencyId already being used."
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "api_auth_code": [
              "sepa_credit_transfers"
            ]
          },
          {
            "api_implicit": [
              "sepa_credit_transfers"
            ]
          },
          {
            "api_db_smart_access": [
              "sepa_credit_transfers"
            ]
          }
        ]
      }
    },




    "/bulk": {
      "post": {
        "tags": [
          "Create Sepa Credit Transfers"
        ],
        "summary": "Initiates Bulk Sepa Credit Transfers",
        "description": "This API is for creating Bulk Sepa Credit Transfers.",
        "parameters": [
          {
            "name": "idempotency-id",
            "in": "header",
            "description": "Unique id of the service call. Must be present during retries to avoid multiple processing of the same request.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "otp",
            "in": "header",
            "description": "One time password required for SCT creation; you can use photo tan or push tan. In case of push tan, pass otp as 'PUSHTAN'. In case of photo tan, please generate otp by using transaction authorisation APIs. There, you must use requestType as 'SEPA_TRANSFER_GRANT'.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Correlation-Id",
            "in": "header",
            "description": "Free form key controlled by the caller e.g. uuid",
            "required": false,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SepaCreditTransferBulkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SepaCreditTransferResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unsuccessful operation, returns http status 400. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 2,
                    "message": "Invalid value for %s."
                  },
                  {
                    "code": 16,
                    "message": "OTP invalid challenge response: %s."
                  },
                  {
                    "code": 17,
                    "message": "Invalid OTP."
                  },
                  {
                    "code": 114,
                    "message": "Unable to identify transaction by Id."
                  },
                  {
                    "code": 127,
                    "message": "Booking date from must precede booking date to."
                  },
                  {
                    "code": 131,
                    "message": "Invalid value for 'sortBy'. Valid values are 'bookingDate[ASC]' and 'bookingDate[DESC]'."
                  },
                  {
                    "code": 132,
                    "message": "not supported"
                  },
                  {
                    "code": 138,
                    "message": "it seems that you started a non pushTAN challenge. Please use the PATCH endpoint to continue"
                  },
                  {
                    "code": 139,
                    "message": "it seems that you started a pushTAN challenge. Please use the GET endpoint to continue"
                  },
                  {
                    "code": 6500,
                    "message": "Parameters in the url or content type are incorrect, please check and retry."
                  },
                  {
                    "code": 6501,
                    "message": "Contracting bank details are Invalid or Missing."
                  },
                  {
                    "code": 6502,
                    "message": "The accepted instructed amount currency is EUR. Please correct your entry and try again."
                  },
                  {
                    "code": 6503,
                    "message": "Parameters submitted are missing or invalid."
                  },
                  {
                    "code": 6505,
                    "message": "Invalid execution date."
                  },
                  {
                    "code": 6507,
                    "message": "Cancellation is not allowed for this transaction."
                  },
                  {
                    "code": 6509,
                    "message": "The parameter in the request does not match with the latest Auth id."
                  },
                  {
                    "code": 6510,
                    "message": "Current status does not allow second factor update with the action provided."
                  },
                  {
                    "code": 6511,
                    "message": "Invalid execution date."
                  },
                  {
                    "code": 6515,
                    "message": "The source iban or account type is invalid."
                  },
                  {
                    "code": 6516,
                    "message": "Cancellation is not allowed for this transaction."
                  },
                  {
                    "code": 6517,
                    "message": "The accepted creditor account currency is EUR. Please correct your entry and try again."
                  },
                  {
                    "code": 6518,
                    "message": "The requested collection date should not be a public holiday or in the weekends. Please try again."
                  },
                  {
                    "code": 6519,
                    "message": "The requested execution date should not be greater than 90 days in the future. Please try again."
                  },
                  {
                    "code": 6520,
                    "message": "Invalid value: requestedExecutionDate must match yyyy-MM-dd format."
                  },
                  {
                    "code": 6521,
                    "message": "The accepted debtor account currency is EUR. Please correct your entry and try again."
                  },
                  {
                    "code": 6523,
                    "message": "There is no legal entity present for the source iban. Please correct your entry and try again."
                  },
                  {
                    "code": 6524,
                    "message": "You have reached the maximum allowable limit for the day. Please wait until tomorrow to initiate additional transfers or reduce your transfer amount and try again."
                  },
                  {
                    "code": 6525,
                    "message": "For the moment, we don't support photo-tan for bulk payments."
                  },
                  {
                    "code": 6526,
                    "message": "Invalid value: createDateTime must match yyyy-MM-dd'T'HH:mm:ss format."
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unsuccessful operation, returns http status 401. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 401,
                    "message": "The requested function requires a SCA Level Authentication."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Unsuccessful operation, returns http status 404. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 6504,
                    "message": "The parameters in the request do not match the initial request."
                  },
                  {
                    "code": 6508,
                    "message": "Sepa payment not found."
                  }
                ]
              }
            }
          },
          "409": {
            "description": "Unsuccessful operation, returns http status 409. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 6506,
                    "message": "The IdempotencyId already being used."
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "api_auth_code": [
              "bulk_sepa_credit_transfer"
            ]
          },
          {
            "api_implicit": [
              "bulk_sepa_credit_transfer"
            ]
          },
          {
            "api_db_smart_access": [
              "bulk_sepa_credit_transfer"
            ]
          }
        ]
      }
    },
    "/bulk/{paymentId}/status": {
      "get": {
        "tags": [
          "Get status for Sepa Credit Transfers"
        ],
        "summary": "Retrieve the status of the Bulk Sepa Credit Transfers",
        "description": "Retrieve the status of a previously initiated Bulk Sepa Credit Transfer.",
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "description": "Payment Id of Bulk Sepa Credit Transfers",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Correlation-Id",
            "in": "header",
            "description": "Free form key controlled by the caller e.g. uuid",
            "required": false,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SepaCreditTransferResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unsuccessful operation, returns http status 400. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 2,
                    "message": "Invalid value for %s."
                  },
                  {
                    "code": 16,
                    "message": "OTP invalid challenge response: %s."
                  },
                  {
                    "code": 17,
                    "message": "Invalid OTP."
                  },
                  {
                    "code": 114,
                    "message": "Unable to identify transaction by Id."
                  },
                  {
                    "code": 127,
                    "message": "Booking date from must precede booking date to."
                  },
                  {
                    "code": 131,
                    "message": "Invalid value for 'sortBy'. Valid values are 'bookingDate[ASC]' and 'bookingDate[DESC]'."
                  },
                  {
                    "code": 132,
                    "message": "not supported"
                  },
                  {
                    "code": 138,
                    "message": "it seems that you started a non pushTAN challenge. Please use the PATCH endpoint to continue"
                  },
                  {
                    "code": 139,
                    "message": "it seems that you started a pushTAN challenge. Please use the GET endpoint to continue"
                  },
                  {
                    "code": 6500,
                    "message": "Parameters in the url or content type are incorrect, please check and retry."
                  },
                  {
                    "code": 6501,
                    "message": "Contracting bank details are Invalid or Missing."
                  },
                  {
                    "code": 6502,
                    "message": "The accepted instructed amount currency is EUR. Please correct your entry and try again."
                  },
                  {
                    "code": 6503,
                    "message": "Parameters submitted are missing or invalid."
                  },
                  {
                    "code": 6505,
                    "message": "Invalid execution date."
                  },
                  {
                    "code": 6507,
                    "message": "Cancellation is not allowed for this transaction."
                  },
                  {
                    "code": 6509,
                    "message": "The parameter in the request does not match with the latest Auth id."
                  },
                  {
                    "code": 6510,
                    "message": "Current status does not allow second factor update with the action provided."
                  },
                  {
                    "code": 6511,
                    "message": "Invalid execution date."
                  },
                  {
                    "code": 6515,
                    "message": "The source iban or account type is invalid."
                  },
                  {
                    "code": 6516,
                    "message": "Cancellation is not allowed for this transaction."
                  },
                  {
                    "code": 6517,
                    "message": "The accepted creditor account currency is EUR. Please correct your entry and try again."
                  },
                  {
                    "code": 6518,
                    "message": "The requested collection date should not be a public holiday or in the weekends. Please try again."
                  },
                  {
                    "code": 6519,
                    "message": "The requested execution date should not be greater than 90 days in the future. Please try again."
                  },
                  {
                    "code": 6520,
                    "message": "Invalid value: requestedExecutionDate must match yyyy-MM-dd format."
                  },
                  {
                    "code": 6521,
                    "message": "The accepted debtor account currency is EUR. Please correct your entry and try again."
                  },
                  {
                    "code": 6523,
                    "message": "There is no legal entity present for the source iban. Please correct your entry and try again."
                  },
                  {
                    "code": 6524,
                    "message": "You have reached the maximum allowable limit for the day. Please wait until tomorrow to initiate additional transfers or reduce your transfer amount and try again."
                  },
                  {
                    "code": 6525,
                    "message": "For the moment, we don't support photo-tan for bulk payments."
                  },
                  {
                    "code": 6526,
                    "message": "Invalid value: createDateTime must match yyyy-MM-dd'T'HH:mm:ss format."
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unsuccessful operation, returns http status 401. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 401,
                    "message": "The requested function requires a SCA Level Authentication."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Unsuccessful operation, returns http status 404. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 6504,
                    "message": "The parameters in the request do not match the initial request."
                  },
                  {
                    "code": 6508,
                    "message": "Sepa payment not found."
                  }
                ]
              }
            }
          },
          "409": {
            "description": "Unsuccessful operation, returns http status 409. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 6506,
                    "message": "The IdempotencyId already being used."
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "api_auth_code": [
              "bulk_sepa_credit_transfer"
            ]
          },
          {
            "api_implicit": [
              "bulk_sepa_credit_transfer"
            ]
          },
          {
            "api_db_smart_access": [
              "bulk_sepa_credit_transfer"
            ]
          }
        ]
      }
    },
    "/bulk/{paymentId}": {
      "get": {
        "tags": [
          "Get details for Sepa Credit Transfers"
        ],
        "summary": "Retrieve the details of the Bulk Sepa Credit Transfers",
        "description": "Retrieve the details of a previously initiated Bulk Sepa Credit Transfer.",
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "description": "Payment Id of Bulk Sepa Credit Transfers",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Correlation-Id",
            "in": "header",
            "description": "Free form key controlled by the caller e.g. uuid",
            "required": false,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SepaBulkCreditTransfersDetails"
                }
              }
            }
          },
          "400": {
            "description": "Unsuccessful operation, returns http status 400. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 2,
                    "message": "Invalid value for %s."
                  },
                  {
                    "code": 16,
                    "message": "OTP invalid challenge response: %s."
                  },
                  {
                    "code": 17,
                    "message": "Invalid OTP."
                  },
                  {
                    "code": 114,
                    "message": "Unable to identify transaction by Id."
                  },
                  {
                    "code": 127,
                    "message": "Booking date from must precede booking date to."
                  },
                  {
                    "code": 131,
                    "message": "Invalid value for 'sortBy'. Valid values are 'bookingDate[ASC]' and 'bookingDate[DESC]'."
                  },
                  {
                    "code": 132,
                    "message": "not supported"
                  },
                  {
                    "code": 138,
                    "message": "it seems that you started a non pushTAN challenge. Please use the PATCH endpoint to continue"
                  },
                  {
                    "code": 139,
                    "message": "it seems that you started a pushTAN challenge. Please use the GET endpoint to continue"
                  },
                  {
                    "code": 6500,
                    "message": "Parameters in the url or content type are incorrect, please check and retry."
                  },
                  {
                    "code": 6501,
                    "message": "Contracting bank details are Invalid or Missing."
                  },
                  {
                    "code": 6502,
                    "message": "The accepted instructed amount currency is EUR. Please correct your entry and try again."
                  },
                  {
                    "code": 6503,
                    "message": "Parameters submitted are missing or invalid."
                  },
                  {
                    "code": 6505,
                    "message": "Invalid execution date."
                  },
                  {
                    "code": 6507,
                    "message": "Cancellation is not allowed for this transaction."
                  },
                  {
                    "code": 6509,
                    "message": "The parameter in the request does not match with the latest Auth id."
                  },
                  {
                    "code": 6510,
                    "message": "Current status does not allow second factor update with the action provided."
                  },
                  {
                    "code": 6511,
                    "message": "Invalid execution date."
                  },
                  {
                    "code": 6515,
                    "message": "The source iban or account type is invalid."
                  },
                  {
                    "code": 6516,
                    "message": "Cancellation is not allowed for this transaction."
                  },
                  {
                    "code": 6517,
                    "message": "The accepted creditor account currency is EUR. Please correct your entry and try again."
                  },
                  {
                    "code": 6518,
                    "message": "The requested collection date should not be a public holiday or in the weekends. Please try again."
                  },
                  {
                    "code": 6519,
                    "message": "The requested execution date should not be greater than 90 days in the future. Please try again."
                  },
                  {
                    "code": 6520,
                    "message": "Invalid value: requestedExecutionDate must match yyyy-MM-dd format."
                  },
                  {
                    "code": 6521,
                    "message": "The accepted debtor account currency is EUR. Please correct your entry and try again."
                  },
                  {
                    "code": 6523,
                    "message": "There is no legal entity present for the source iban. Please correct your entry and try again."
                  },
                  {
                    "code": 6524,
                    "message": "You have reached the maximum allowable limit for the day. Please wait until tomorrow to initiate additional transfers or reduce your transfer amount and try again."
                  },
                  {
                    "code": 6525,
                    "message": "For the moment, we don't support photo-tan for bulk payments."
                  },
                  {
                    "code": 6526,
                    "message": "Invalid value: createDateTime must match yyyy-MM-dd'T'HH:mm:ss format."
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unsuccessful operation, returns http status 401. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 401,
                    "message": "The requested function requires a SCA Level Authentication."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Unsuccessful operation, returns http status 404. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 6504,
                    "message": "The parameters in the request do not match the initial request."
                  },
                  {
                    "code": 6508,
                    "message": "Sepa payment not found."
                  }
                ]
              }
            }
          },
          "409": {
            "description": "Unsuccessful operation, returns http status 409. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 6506,
                    "message": "The IdempotencyId already being used."
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "api_auth_code": [
              "bulk_sepa_credit_transfer"
            ]
          },
          {
            "api_implicit": [
              "bulk_sepa_credit_transfer"
            ]
          },
          {
            "api_db_smart_access": [
              "bulk_sepa_credit_transfer"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Cancel Sepa Credit Transfers"
        ],
        "summary": "Cancel the Bulk Sepa Credit Transfers",
        "description": "Cancel a previously initiated Bulk Sepa Credit Transfer.",
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "description": "Payment Id of Bulk Sepa Credit Transfers",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "idempotency-id",
            "in": "header",
            "description": "Unique id of the service call. Must be present during retries to avoid multiple processing of the same request.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "otp",
            "in": "header",
            "description": "One time password required for SCT cancellation; you can use photo tan or push tan. In case of push tan, pass otp as 'PUSHTAN'. In case of photo tan, please generate otp by using transaction authorisation APIs. There, you must use requestType as 'SEPA_TRANSFER_CANCELLATION'.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Correlation-Id",
            "in": "header",
            "description": "Free form key controlled by the caller e.g. uuid",
            "required": false,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SepaCreditTransferResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unsuccessful operation, returns http status 400. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 2,
                    "message": "Invalid value for %s."
                  },
                  {
                    "code": 16,
                    "message": "OTP invalid challenge response: %s."
                  },
                  {
                    "code": 17,
                    "message": "Invalid OTP."
                  },
                  {
                    "code": 114,
                    "message": "Unable to identify transaction by Id."
                  },
                  {
                    "code": 127,
                    "message": "Booking date from must precede booking date to."
                  },
                  {
                    "code": 131,
                    "message": "Invalid value for 'sortBy'. Valid values are 'bookingDate[ASC]' and 'bookingDate[DESC]'."
                  },
                  {
                    "code": 132,
                    "message": "not supported"
                  },
                  {
                    "code": 138,
                    "message": "it seems that you started a non pushTAN challenge. Please use the PATCH endpoint to continue"
                  },
                  {
                    "code": 139,
                    "message": "it seems that you started a pushTAN challenge. Please use the GET endpoint to continue"
                  },
                  {
                    "code": 6500,
                    "message": "Parameters in the url or content type are incorrect, please check and retry."
                  },
                  {
                    "code": 6501,
                    "message": "Contracting bank details are Invalid or Missing."
                  },
                  {
                    "code": 6502,
                    "message": "The accepted instructed amount currency is EUR. Please correct your entry and try again."
                  },
                  {
                    "code": 6503,
                    "message": "Parameters submitted are missing or invalid."
                  },
                  {
                    "code": 6505,
                    "message": "Invalid execution date."
                  },
                  {
                    "code": 6507,
                    "message": "Cancellation is not allowed for this transaction."
                  },
                  {
                    "code": 6509,
                    "message": "The parameter in the request does not match with the latest Auth id."
                  },
                  {
                    "code": 6510,
                    "message": "Current status does not allow second factor update with the action provided."
                  },
                  {
                    "code": 6511,
                    "message": "Invalid execution date."
                  },
                  {
                    "code": 6515,
                    "message": "The source iban or account type is invalid."
                  },
                  {
                    "code": 6516,
                    "message": "Cancellation is not allowed for this transaction."
                  },
                  {
                    "code": 6517,
                    "message": "The accepted creditor account currency is EUR. Please correct your entry and try again."
                  },
                  {
                    "code": 6518,
                    "message": "The requested collection date should not be a public holiday or in the weekends. Please try again."
                  },
                  {
                    "code": 6519,
                    "message": "The requested execution date should not be greater than 90 days in the future. Please try again."
                  },
                  {
                    "code": 6520,
                    "message": "Invalid value: requestedExecutionDate must match yyyy-MM-dd format."
                  },
                  {
                    "code": 6521,
                    "message": "The accepted debtor account currency is EUR. Please correct your entry and try again."
                  },
                  {
                    "code": 6523,
                    "message": "There is no legal entity present for the source iban. Please correct your entry and try again."
                  },
                  {
                    "code": 6524,
                    "message": "You have reached the maximum allowable limit for the day. Please wait until tomorrow to initiate additional transfers or reduce your transfer amount and try again."
                  },
                  {
                    "code": 6525,
                    "message": "For the moment, we don't support photo-tan for bulk payments."
                  },
                  {
                    "code": 6526,
                    "message": "Invalid value: createDateTime must match yyyy-MM-dd'T'HH:mm:ss format."
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unsuccessful operation, returns http status 401. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 401,
                    "message": "The requested function requires a SCA Level Authentication."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Unsuccessful operation, returns http status 404. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 6504,
                    "message": "The parameters in the request do not match the initial request."
                  },
                  {
                    "code": 6508,
                    "message": "Sepa payment not found."
                  }
                ]
              }
            }
          },
          "409": {
            "description": "Unsuccessful operation, returns http status 409. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 6506,
                    "message": "The IdempotencyId already being used."
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "api_auth_code": [
              "bulk_sepa_credit_transfer"
            ]
          },
          {
            "api_implicit": [
              "bulk_sepa_credit_transfer"
            ]
          },
          {
            "api_db_smart_access": [
              "bulk_sepa_credit_transfer"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "SepaCreditTransferBulkRequest": {
        "required": [
          "groupHeader",
          "paymentInformation"
        ],
        "type": "object",
        "properties": {
          "groupHeader": {
            "$ref": "#/components/schemas/GroupHeader"
          },
          "paymentInformation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentInformation"
            }
          }
        }
      },
      "SepaCreditTransferRequest": {
        "required": [
          "creditor",
          "creditorAccount",
          "creditorAgent",
          "debtor",
          "debtorAccount",
          "instructedAmount"
        ],
        "type": "object",
        "properties": {
          "purposeCode": {
            "$ref": "#/components/schemas/PurposeCode"
          },
          "requestedExecutionDate": {
            "$ref": "#/components/schemas/RequestedExecutionDate"
          },
          "debtor": {
            "$ref": "#/components/schemas/Debtor"
          },
          "debtorAccount": {
            "$ref": "#/components/schemas/DebtorAccount"
          },
          "paymentIdentification": {
            "$ref": "#/components/schemas/PaymentIdentification"
          },
          "instructedAmount": {
            "$ref": "#/components/schemas/InstructedAmount"
          },
          "creditorAgent": {
            "$ref": "#/components/schemas/CreditorAgent"
          },
          "creditor": {
            "$ref": "#/components/schemas/Creditor"
          },
          "creditorAccount": {
            "$ref": "#/components/schemas/CreditorAccount"
          },
          "remittanceInformationStructured": {
            "$ref": "#/components/schemas/RemittanceInformationStructured"
          },
          "remittanceInformationUnstructured": {
            "$ref": "#/components/schemas/RemittanceInformationUnstructured"
          }
        }
      },
      "SepaCreditTransferUpdateScaRequest": {
        "required": [
          "action",
          "authId"
        ],
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/Action"
          },
          "authId": {
            "$ref": "#/components/schemas/AuthId"
          }
        }
      },
      "SepaCreditTransferResponse": {
        "required": [
          "authId",
          "paymentId",
          "transactionStatus"
        ],
        "type": "object",
        "properties": {
          "transactionStatus": {
            "$ref": "#/components/schemas/TransactionStatus"
          },
          "paymentId": {
            "$ref": "#/components/schemas/PaymentId"
          },
          "authId": {
            "$ref": "#/components/schemas/AuthId"
          }
        }
      },
      "SepaCreditTransferDetailsResponse": {
        "required": [
          "creditor",
          "creditorAccount",
          "creditorAgent",
          "debtor",
          "debtorAccount",
          "instructedAmount",
          "paymentId",
          "purposeCode",
          "remittanceInformationStructured",
          "remittanceInformationUnstructured",
          "requestedExecutionDate",
          "transactionStatus"
        ],
        "type": "object",
        "properties": {
          "transactionStatus": {
            "$ref": "#/components/schemas/TransactionStatus"
          },
          "paymentId": {
            "$ref": "#/components/schemas/PaymentId"
          },
          "purposeCode": {
            "$ref": "#/components/schemas/PurposeCode"
          },
          "requestedExecutionDate": {
            "$ref": "#/components/schemas/RequestedExecutionDate"
          },
          "debtor": {
            "$ref": "#/components/schemas/Debtor"
          },
          "debtorAccount": {
            "$ref": "#/components/schemas/DebtorAccount"
          },
          "creditorAgent": {
            "$ref": "#/components/schemas/CreditorAgent"
          },
          "creditor": {
            "$ref": "#/components/schemas/Creditor"
          },
          "creditorAccount": {
            "$ref": "#/components/schemas/CreditorAccount"
          },
          "paymentIdentification": {
            "$ref": "#/components/schemas/PaymentIdentification"
          },
          "instructedAmount": {
            "$ref": "#/components/schemas/InstructedAmount"
          },
          "remittanceInformationStructured": {
            "$ref": "#/components/schemas/RemittanceInformationStructured"
          },
          "remittanceInformationUnstructured": {
            "$ref": "#/components/schemas/RemittanceInformationUnstructured"
          }
        }
      },
      "PurposeCode": {
        "maxLength": 4,
        "minLength": 4,
        "type": "string",
        "description": "ExternalPurpose1Code"
      },
      "PaymentInformation": {
        "required": [
          "controlSum",
          "creditTransferTransactionInformation",
          "debtor",
          "debtorAccount",
          "debtorAgent",
          "numberOfTransactions",
          "paymentInformationId",
          "paymentMethod",
          "requestedExecutionDate"
        ],
        "type": "object",
        "properties": {
          "paymentInformationId": {
            "$ref": "#/components/schemas/PaymentInformationId"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "batchBooking": {
            "$ref": "#/components/schemas/BatchBooking"
          },
          "numberOfTransactions": {
            "$ref": "#/components/schemas/NumberOfTransactions"
          },
          "controlSum": {
            "$ref": "#/components/schemas/ControlSum"
          },
          "PaymentTypeInformation": {
            "$ref": "#/components/schemas/PaymentTypeInformation"
          },
          "requestedExecutionDate": {
            "$ref": "#/components/schemas/RequestedExecutionDate"
          },
          "debtor": {
            "$ref": "#/components/schemas/Debtor"
          },
          "debtorAccount": {
            "$ref": "#/components/schemas/DebtorAccount"
          },
          "debtorAgent": {
            "$ref": "#/components/schemas/DebtorAgent"
          },
          "chargeBearer": {
            "$ref": "#/components/schemas/ChargeBearer"
          },
          "creditTransferTransactionInformation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditTransferTransactionInformation"
            }
          }
        }
      },
      "PaymentTypeInformation": {
        "type": "object",
        "properties": {
          "serviceLevel": {
            "$ref": "#/components/schemas/ServiceLevel"
          },
          "localInstrument": {
            "$ref": "#/components/schemas/LocalInstrument"
          },
          "categoryPurpose": {
            "$ref": "#/components/schemas/CategoryPurpose"
          }
        }
      },
      "ServiceLevel": {
        "type": "object",
        "properties": {
          "serviceLevelCode": {
            "$ref": "#/components/schemas/ServiceLevelCode"
          }
        }
      },
      "LocalInstrument": {
        "type": "object",
        "properties": {
          "localInstrumentCode": {
            "$ref": "#/components/schemas/LocalInstrumentCode"
          },
          "localInstrumentProprietary": {
            "$ref": "#/components/schemas/LocalInstrumentProprietary"
          }
        }
      },
      "CategoryPurpose": {
        "type": "object",
        "properties": {
          "categoryPurposeCode": {
            "$ref": "#/components/schemas/CategoryPurposeCode"
          }
        }
      },
      "CategoryPurposeCode": {
        "maxLength": 35,
        "type": "string"
      },
      "ChargeBearer": {
        "maxLength": 35,
        "type": "string"
      },
      "LocalInstrumentCode": {
        "maxLength": 35,
        "type": "string"
      },
      "LocalInstrumentProprietary": {
        "maxLength": 35,
        "type": "string"
      },
      "CreditTransferTransactionInformation": {
        "required": [
          "creditor",
          "creditorAccount",
          "instructedAmount"
        ],
        "type": "object",
        "properties": {
          "paymentIdentification": {
            "$ref": "#/components/schemas/PaymentIdentification"
          },
          "instructedAmount": {
            "$ref": "#/components/schemas/InstructedAmount"
          },
          "chargeBearer": {
            "$ref": "#/components/schemas/ChargeBearer"
          },
          "ultimateDebtor": {
            "$ref": "#/components/schemas/Debtor"
          },
          "creditorAgent": {
            "$ref": "#/components/schemas/CreditorAgent"
          },
          "creditor": {
            "$ref": "#/components/schemas/Creditor"
          },
          "creditorAccount": {
            "$ref": "#/components/schemas/CreditorAccount"
          },
          "purposeCode": {
            "$ref": "#/components/schemas/PurposeCode"
          },
          "remittanceInformationStructured": {
            "$ref": "#/components/schemas/RemittanceInformationStructured"
          },
          "remittanceInformationUnstructured": {
            "$ref": "#/components/schemas/RemittanceInformationUnstructured"
          }
        }
      },
      "GroupHeader": {
        "required": [
          "controlSum",
          "creationDateTime",
          "initiatingParty",
          "messageId",
          "numberOfTransactions"
        ],
        "type": "object",
        "properties": {
          "messageId": {
            "$ref": "#/components/schemas/MessageIdForGroupHeader"
          },
          "numberOfTransactions": {
            "$ref": "#/components/schemas/NumberOfTransactions"
          },
          "controlSum": {
            "$ref": "#/components/schemas/ControlSum"
          },
          "initiatingParty": {
            "$ref": "#/components/schemas/InitiatingParty"
          },
          "createDateTime": {
            "$ref": "#/components/schemas/CreateDateTime"
          },
          "schemeName": {
            "$ref": "#/components/schemas/SchemeName"
          }
        }
      },
      "BatchBooking": {
        "type": "boolean",
        "description": "Validated as true or false. If present and contains \"true\", batch booking is requested. If present and contains \"false\", booking per transaction is requester. If element is not present, pre-agreed customer-to-PSP conditions apply."
      },
      "PaymentInformationId": {
        "maxLength": 35,
        "type": "string",
        "description": "Unique identification, as assigned by a sending party, to unambiguously identify the payment information."
      },
      "PaymentMethod": {
        "maxLength": 35,
        "type": "string",
        "description": "Specifies the means of payment that will be used to move the amount of money. Only TRF allowed for now."
      },
      "NumberOfTransactions": {
        "type": "integer",
        "description": "The total number of Payment Instructions within this request."
      },
      "ControlSum": {
        "type": "integer",
        "description": "The total sum of all Instructed Amounts within this request."
      },
      "InitiatingParty": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "identification": {
            "$ref": "#/components/schemas/InitiatingPartyIdentification"
          }
        }
      },
      "ServiceLevelCode": {
        "maxLength": 10,
        "type": "string"
      },
      "Name": {
        "maxLength": 70,
        "type": "string",
        "description": "Name by which a party is known and which is usually used to identify that party."
      },
      "SchemeName": {
        "maxLength": 35,
        "type": "string"
      },
      "RequestedExecutionDate": {
        "type": "string",
        "description": "Must match yyyy-MM-dd format, also in CET timezone."
      },
      "CreateDateTime": {
        "type": "string",
        "description": "Must match yyyy-MM-dd'T'HH:mm:ss' format. Timestamp of request creation date and time at which the message was created."
      },
      "InitiatingPartyIdentification": {
        "type": "object",
        "properties": {
          "identification": {
            "$ref": "#/components/schemas/InitiatingPartyIdentificationIdentification"
          },
          "organisationIdentification": {
            "$ref": "#/components/schemas/OrganisationIdentification"
          },
          "others": {
            "$ref": "#/components/schemas/InitiatingPartyIdentificationOthers"
          }
        }
      },
      "InitiatingPartyIdentificationOthers": {
        "maxLength": 35,
        "type": "string"
      },
      "OrganisationIdentification": {
        "maxLength": 35,
        "type": "string"
      },
      "InitiatingPartyIdentificationIdentification": {
        "maxLength": 35,
        "type": "string"
      },
      "Debtor": {
        "required": [
          "debtorName"
        ],
        "type": "object",
        "properties": {
          "debtorName": {
            "$ref": "#/components/schemas/DebtorName"
          },
          "debtorPostalAddress": {
            "$ref": "#/components/schemas/Address"
          }
        }
      },
      "DebtorAccount": {
        "required": [
          "iban"
        ],
        "type": "object",
        "properties": {
          "iban": {
            "$ref": "#/components/schemas/IBAN"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          }
        }
      },
      "DebtorAgent": {
        "required": [
          "financialInstitutionId"
        ],
        "type": "object",
        "properties": {
          "financialInstitutionId": {
            "$ref": "#/components/schemas/DebtorFinancialInstitutionId"
          }
        }
      },
      "DebtorFinancialInstitutionId": {
        "type": "object",
        "properties": {
          "bic": {
            "$ref": "#/components/schemas/BIC"
          },
          "id": {
            "$ref": "#/components/schemas/DebtorAgentId"
          },
          "others": {
            "$ref": "#/components/schemas/DebtorAgentOther"
          }
        }
      },
      "PaymentIdentification": {
        "type": "object",
        "properties": {
          "endToEndIdentification": {
            "$ref": "#/components/schemas/EndToEndIdentification"
          },
          "instructionId": {
            "$ref": "#/components/schemas/InstructionId"
          }
        }
      },
      "InstructedAmount": {
        "required": [
          "amount",
          "currency"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "example": 58.13
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          }
        }
      },
      "CreditorAgent": {
        "required": [
          "financialInstitutionId"
        ],
        "type": "object",
        "properties": {
          "financialInstitutionId": {
            "$ref": "#/components/schemas/FinancialInstitutionId"
          }
        }
      },
      "Creditor": {
        "required": [
          "creditorName"
        ],
        "type": "object",
        "properties": {
          "creditorName": {
            "$ref": "#/components/schemas/CreditorName"
          },
          "creditorPostalAddress": {
            "$ref": "#/components/schemas/Address"
          }
        }
      },
      "CreditorAccount": {
        "required": [
          "currency",
          "iban"
        ],
        "type": "object",
        "properties": {
          "iban": {
            "$ref": "#/components/schemas/IBAN"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          }
        }
      },
      "RemittanceInformationStructured": {
        "maxLength": 140,
        "type": "string",
        "description": "Recommended to be used in each transaction; contract related - references to the business; it depends on the client what they want to include."
      },
      "RemittanceInformationUnstructured": {
        "maxLength": 140,
        "type": "string",
        "description": "Recommended to be used in each transaction ; contract related - references to the business; it depends on the client what they want to include."
      },
      "DebtorName": {
        "maxLength": 140,
        "type": "string"
      },
      "Address": {
        "type": "object",
        "properties": {
          "country": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "ISO 3166-1 alpha-2 country code",
            "example": "DE"
          },
          "addressLine": {
            "$ref": "#/components/schemas/AddressLine"
          }
        }
      },
      "AddressLine": {
        "type": "object",
        "properties": {
          "streetAndHouseNumber": {
            "maxLength": 70,
            "type": "string",
            "description": "Street name and house number."
          },
          "zipCodeAndCity": {
            "maxLength": 70,
            "type": "string",
            "description": "Zip code and city name."
          }
        }
      },
      "EndToEndIdentification": {
        "maxLength": 35,
        "pattern": "[a-zA-Z0-9.-]{1,35}",
        "type": "string",
        "description": "Unique identification assigned by the initiating party to unambiguously identify the transaction."
      },
      "InstructionId": {
        "maxLength": 35,
        "pattern": "[a-zA-Z0-9.-]{1,35}",
        "type": "string"
      },
      "Currency": {
        "pattern": "[A-Z]{3}",
        "type": "string",
        "description": "ISO 4217 Alpha 3 currency code.",
        "example": "EUR"
      },
      "BIC": {
        "type": "string"
      },
      "DebtorAgentId": {
        "maxLength": 35,
        "type": "string"
      },
      "DebtorAgentOther": {
        "type": "string"
      },
      "FinancialInstitutionId": {
        "type": "string",
        "description": ""
      },
      "CreditorName": {
        "maxLength": 70,
        "type": "string",
        "description": "Name by which a party is known and which is usually used to identify that party."
      },
      "IBAN": {
        "pattern": "[A-Z]{2}[0-9]{2}[A-Z0-9]{1,30}",
        "type": "string",
        "description": "The IBAN of this account."
      },
      "ErrorResponse": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The error code"
          },
          "message": {
            "type": "string",
            "description": "Description of the belonging error code."
          },
          "messageId": {
            "type": "string",
            "description": "dbAPI internal message-id (unique identifier) that allow reference to each of your API calls."
          }
        },
        "description": "Default error response message"
      },
      "TransactionStatus": {
        "type": "string",
        "description": "Specifies the status of a transaction in a coded form based on Sepa Rulebook: AT-R1 The type of R-message 'RJCT’ in case of a negative confirmation or reject, or 'ACCP' in case of a positive confirmation. A 'PDNG' value is possible in case Payment Order Response is sent for not yet rejected transaction.",
        "example": "ACCP",
        "enum": [
          "RJCT",
          "RCVD",
          "ACCP",
          "ACTC",
          "ACSP",
          "ACSC",
          "ACWC",
          "ACWP",
          "ACCC",
          "CANC",
          "PDNG"
        ]
      },
      "Action": {
        "type": "string",
        "description": "Defines the action for retry second factor, CREATE is for updating the second factor for create Sepa Credit Transfer and CANCEL is for cancel.",
        "enum": [
          "CREATE",
          "CANCEL"
        ]
      },
      "PaymentId": {
        "type": "string",
        "description": "Identificación de recursos del recurso de entrada de pago generado ('ID de transacción' del encabezado que está poblado con la ID intra banco);Debe estar disponible al menos cuando el estado es PDNG o ACCP.",
        "example": "232ed5b7-fc70-4c67-98bb-bf95b3300001"
      },
      "AuthId": {
        "type": "string",
        "description": "ID de autenticación utilizado para actualizar el estado SCA SEPA Pago;Será válido por 5 minutos.",
        "example": "232ed5b7-fc70-4c67-98bb-bf95b3300001"
      },
      "SepaBulkCreditTransfersDetails": {
        "required": [
          "controlSum",
          "paymentInformation"
        ],
        "type": "object",
        "properties": {
          "controlSum": {
            "$ref": "#/components/schemas/ControlSum"
          },
          "paymentInformation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentInformationDetails"
            }
          },
          "additionalInfo": {
            "$ref": "#/components/schemas/AdditionalInfo"
          },
          "messageId": {
            "$ref": "#/components/schemas/DbMessageId"
          },
          "numberOfTransactions": {
            "$ref": "#/components/schemas/NumberOfTransactions"
          },
          "creationDateTime": {
            "$ref": "#/components/schemas/CreationDateTime"
          },
          "initiatingParty": {
            "$ref": "#/components/schemas/InitiatingParty"
          },
          "supplementaryData": {
            "$ref": "#/components/schemas/SupplementaryDataForWhole"
          }
        },
        "description": "Bulk Sepa Credit Transfers Details"
      },
      "CreationDateTime": {
        "type": "string",
        "description": "Creation time of Sepa Bulk Credit Transfers.",
        "format": "date"
      },
      "SupplementaryDataForWhole": {
        "type": "object",
        "properties": {
          "dbOrigionalPaymentMessageInformation": {
            "$ref": "#/components/schemas/DbOrigionalPaymentMessageInformation"
          }
        },
        "description": "Supplementary Details of Bulk Sepa Credit Transfers"
      },
      "PaymentInformationDetails": {
        "required": [
          "chargeBearer",
          "controlSum",
          "creditTransfers",
          "debtor",
          "debtorAccount",
          "numberOfTransactions"
        ],
        "type": "object",
        "properties": {
          "debtorAccount": {
            "$ref": "#/components/schemas/DebtorAccount"
          },
          "chargeBearer": {
            "$ref": "#/components/schemas/ChargeBearer"
          },
          "paymentInformationId": {
            "$ref": "#/components/schemas/PaymentInformationId"
          },
          "debtorAgent": {
            "$ref": "#/components/schemas/DebtorAgent"
          },
          "serviceLevel": {
            "$ref": "#/components/schemas/ServiceLevel"
          },
          "batchBooking": {
            "$ref": "#/components/schemas/BatchBooking"
          },
          "numberOfTransactions": {
            "$ref": "#/components/schemas/NumberOfTransactions"
          },
          "controlSum": {
            "$ref": "#/components/schemas/ControlSum"
          },
          "requestedExecutionDate": {
            "$ref": "#/components/schemas/RequestedExecutionDate"
          },
          "localInstrument": {
            "$ref": "#/components/schemas/LocalInstrument"
          },
          "debtor": {
            "$ref": "#/components/schemas/Debtor"
          },
          "creditTransfers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditTransfersDetails"
            }
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentMethod"
          }
        },
        "description": "Bulk Sepa Credit Transfers Payment Information Details"
      },
      "AdditionalInfo": {
        "type": "object",
        "properties": {
          "transactionStatus": {
            "$ref": "#/components/schemas/TransactionStatus"
          },
          "paymentId": {
            "$ref": "#/components/schemas/PaymentId"
          }
        },
        "description": "Additional Info of Bulk Sepa Credit Transfers"
      },
      "CreditTransfersDetails": {
        "required": [
          "creditor",
          "creditorAccount",
          "instructedAmount",
          "paymentIdentification",
          "paymentInformation"
        ],
        "type": "object",
        "properties": {
          "paymentIdentification": {
            "$ref": "#/components/schemas/PaymentIdentification"
          },
          "creditorAgent": {
            "$ref": "#/components/schemas/CreditorAgent"
          },
          "creditorAccount": {
            "$ref": "#/components/schemas/CreditorAccount"
          },
          "instructedAmount": {
            "$ref": "#/components/schemas/InstructedAmount"
          },
          "creditor": {
            "$ref": "#/components/schemas/Creditor"
          },
          "remittanceInformationUnstructured": {
            "$ref": "#/components/schemas/RemittanceInformationUnstructured"
          },
          "supplementaryData": {
            "$ref": "#/components/schemas/SupplementaryData"
          }
        },
        "description": "Bulk Sepa Credit Transfers Details"
      },
      "SupplementaryData": {
        "type": "object",
        "properties": {
          "dbPaymentTransactionInformation": {
            "$ref": "#/components/schemas/DbPaymentTransactionInformation"
          }
        },
        "description": "Supplementary Details of Bulk Sepa Credit Transfers"
      },
      "DbPaymentTransactionInformation": {
        "type": "object",
        "properties": {
          "dbPaymentId": {
            "$ref": "#/components/schemas/PaymentId"
          },
          "dbOrigionalPaymentTransactionInformation": {
            "$ref": "#/components/schemas/DbOrigionalPaymentTransactionInformation"
          },
          "dbPaymentTransactionId": {
            "$ref": "#/components/schemas/DbPaymentTransactionId"
          },
          "dbOrigionalPaymentMessageInformation": {
            "$ref": "#/components/schemas/DbOrigionalPaymentMessageInformation"
          }
        },
        "description": "DB Payment Transaction Information of Bulk Sepa Credit Transfers"
      },
      "DbOrigionalPaymentMessageInformation": {
        "type": "object",
        "properties": {
          "dbMessageId": {
            "$ref": "#/components/schemas/DbMessageId"
          },
          "dbMessagePriority": {
            "$ref": "#/components/schemas/DbMessagePriority"
          }
        },
        "description": "DB Origional Payment Message Information of Bulk Sepa Credit Transfers"
      },
      "DbOrigionalPaymentTransactionInformation": {
        "type": "object",
        "properties": {
          "dbPaymentId": {
            "$ref": "#/components/schemas/PaymentId"
          },
          "dbPrenoteReferenceId": {
            "$ref": "#/components/schemas/DbPrenoteReferenceId"
          },
          "dbPaymentTransactionId": {
            "$ref": "#/components/schemas/DbPaymentTransactionId"
          }
        },
        "description": "DB Origional Payment Transaction Information of Bulk Sepa Credit Transfers"
      },
      "DbPrenoteReferenceId": {
        "type": "object",
        "properties": {
          "additionalReferenceATC": {
            "$ref": "#/components/schemas/AdditionalReferenceATC"
          }
        },
        "description": "DB Prenote Reference Id of Bulk Sepa Credit Transfers"
      },
      "AdditionalReferenceATC": {
        "type": "string",
        "description": "Additional Reference ATC.",
        "example": "20250325112842996"
      },
      "DbPaymentTransactionId": {
        "type": "string",
        "description": "Db Payment Transaction Id",
        "example": "232ed5b7-fc70-4c67-98bb-bf95b3300001"
      },
      "DbMessageId": {
        "type": "string",
        "description": "Db Payment Message Id",
        "example": "232ed5b7-fc70-4c67-98bb-bf95b3300001"
      },
      "MessageIdForGroupHeader": {
        "type": "string",
        "description": "Customer reference. This field can contain your own reference to assist you in identifying the file.",
        "example": "Message-ID-4711"
      },
      "DbMessagePriority": {
        "type": "string",
        "description": "Db Payment Message Priority",
        "example": "LOW"
      }
    },
    "securitySchemes": {
      "api_auth_code": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://simulator-api.db.com:443/gw/oidc/authorize",
            "tokenUrl": "https://simulator-api.db.com:443/gw/oidc/token",
            "scopes": {
              "sepa_credit_transfers": "Initiate and check status of Sepa Credit Transfers",
              "bulk_sepa_credit_transfer": "Bulk Sepa Credit Transfer with status check",
              "openid": "Request access to OpenId Connect functionality",
              "offline_access": "Request an OAuth2 Refresh Token"
            }
          }
        }
      },
      "api_implicit": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://simulator-api.db.com:443/gw/oidc/authorize",
            "scopes": {
              "sepa_credit_transfers": "Initiate and check status of Sepa Credit Transfers",
              "bulk_sepa_credit_transfer": "Bulk Sepa Credit Transfer with status check",
              "openid": "Request access to OpenId Connect functionality"
            }
          }
        }
      },
      "api_db_smart_access": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://simulator-api.db.com:443/gw/oidc/token",
            "scopes": {
              "sepa_credit_transfers": "Initiate and check status of Sepa Credit Transfers",
              "bulk_sepa_credit_transfer": "Bulk Sepa Credit Transfer with status check"
            }
          }
        }
      }
    }
  }
}